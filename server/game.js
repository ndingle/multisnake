/************************************************** * game.js * * This file configures the basic settings for the  * game object. *************************************************/var item = function() {	this.alive = false;	this.x = 0;	this.y = 0;	this.frame = 0;	this.speed = 0;		this.NextFrame = function() {		if(!this.alive) {						this.frame += 1;			if(this.frame >= this.speed) {				this.alive = true;				this.frame = 0;				this.x = Math.floor(Math.random() * (game.gridSize-1));				this.y = Math.floor(Math.random() * (game.gridSize-1));				return true;			}		}		return false;	}		this.GetInfo = function() {		var i = new Object();		i.x = this.x;		i.y = this.y;		return i;	}	}var player = function() { 	this.alive = true;	this.name = "";	this.colour = "#ff0000";	this.kills = 0;	this.deaths = 0;	this.time = new Date();	this.dir = game.dirs[Math.round(Math.random() * 3)];	this.new_dir = "";		this.Reset = function() {			//Send all the data back to init		this.currentColour = "#ffff00";		this.speed = 9;		this.powerUp = false;		this.score = 0;		this.frame = 0;		this.pause = 2;		this.food = 0;		this.framesDead = 0;		this.invincible = true;		this.framesAlive = 0;		this.updateRequired = false;				//Setup the body and fill in the other pieces		this.body = new Array();		this.body[0] = new Object();		this.body[1] = new Object();		this.body[2] = new Object();		this.RandomiseCoordinates();		},			this.RandomiseCoordinates = function() {			//Randomise		this.body[0].x = Math.round(Math.random() * (game.gridSize-1));		this.body[0].y = Math.round(Math.random() * (game.gridSize-1));					//Set all coords to the same place		for(var i = 1; i < this.body.length; i++) {			this.body[i].x = this.body[0].x;			this.body[i].y = this.body[0].y;		}		//Set the pause for each body piece		this.pause = this.body.length-1;		}		this.GetInfo = function(highlight) {				//Return the information in a basic form		var i = new Object();		i.n = this.name;		i.c = this.currentColour;		i.b = new Array();		i.t = (new Date() - this.time)/1000;		i.k = this.kills;		i.d = this.deaths;		i.s = this.score;		if(highlight) i.h = true;		for(var j = 0; j < this.body.length; j++) {			i.b.push(this.body[j]);		}				return i;			}		this.MakeInvincible = function() {			//Setup the data needed to be invincible		this.framesAlive = 0;		this.invincible = true;		this.currentcolour = "#ffff00";		this.updateRequired = true;		},		this.Move = function() {			//This is to turn off the player's invincible		if(this.framesAlive >= 0 && this.invincible) {			this.framesAlive += 1;			if(this.framesAlive >= game.invincibleTime) {				//Turn off, change colour and never check again				this.invincible = false;				this.currentColour = this.colour;				this.updateRequired = true;				this.framesAlive = -1;			}		}				//Check if they have a power up		if(this.framesAlive >= 0 && this.powerUp) {			this.framesAlive += 1;			if(this.framesAlive >= game.powerUpTime) {				//Turn off the powerup				this.powerUp = false;				this.framesAlive = -1;			}		}				//Check the new direction first		if(this.new_dir == "DOWN" && !(this.dir == "UP")) this.dir = this.new_dir;		if(this.new_dir == "UP" && !(this.dir == "DOWN")) this.dir = this.new_dir;		if(this.new_dir == "LEFT" && !(this.dir == "RIGHT")) this.dir = this.new_dir;		if(this.new_dir == "RIGHT" && !(this.dir == "LEFT")) this.dir = this.new_dir;				//Where do we start		var start = this.body.length-1;		if(this.pause > 0) {			start -= this.pause;			this.pause -= 1;		}				//Shuffle through the parts		for(var i = start; i >= 1; --i) {					//I tried object swap but javascript came up with crazy values then (such as -65 etc)			this.body[i].x = this.body[i-1].x;			this.body[i].y = this.body[i-1].y;					}		switch(this.dir) {			//Up			case "UP":				this.body[0].y -= 1;				if(this.body[0].y < 0) this.body[0].y = game.gridSize-1;				break;			//Down			case "DOWN":				this.body[0].y += 1;				if(this.body[0].y >= game.gridSize) this.body[0].y = 0;				break;			//Left			case "LEFT":				this.body[0].x -= 1;				if(this.body[0].x < 0) this.body[0].x = game.gridSize-1;				break;			//Right			case "RIGHT":				this.body[0].x += 1;				if(this.body[0].x >= game.gridSize) this.body[0].x = 0;				break;				}				//Return the movement information				return this.body[0];		}		this.NextFrame = function() {		//Increase frames and return if we move		this.frame += 1;		if(this.powerUp) {			if(this.frame >= game.powerUpSpeed) {				this.frame = 0;				return true;			}		}		else{			if(this.frame >= this.speed) {				this.frame = 0;				return true;			}		}		return false;	}		this.Grow = function() {		//Grow the snake		if(this.speed > 5) {			this.food += 1;			if(this.food == 2) {				this.speed -= 1;				this.food = 0;			}		}				this.score += game.foodScore;				var new_index = this.body.length;		this.body[new_index] = new Object();		this.body[new_index].x = this.body[new_index-1].x;		this.body[new_index].y = this.body[new_index-1].y;		this.pause += 1;	}		this.PowerUp = function() {			//Speed him up		this.powerUp = true;		this.framesAlive = 0;		},		this.IncreaseKills = function() {		this.kills += 1;		this.score += game.killScore;	},		this.HitSelf = function() {		if(this.pause == 0) {			for(var i = 2; i < this.body.length; i++) {				if(this.body[0].x == this.body[i].x &&				   this.body[0].y == this.body[i].y) {					return true;				}			}		}		return false;	},		this.ChangeName = function(name) {		//Ensure the new name is ok first		if(game.IsNameOK(name)) {			this.name = name;			this.updateRequired = true;		}	}	}game = { 	gameSpeed: 5,	running: true,	players: new Array(),	gridSize: 35,	invincibleTime: 15,	powerUpTime: 45,	foodScore: 15,	powerUpSpeed: 5,	respawnTime: 300,	killScore: 50,	dirs: ["UP","DOWN","LEFT","RIGHT"],	banned : [],	maxPlayers: 8,	food: new item(),	powerUp: new item(),		AddPlayer: function(name, colour) {		var p = new player(this.gridSize);		var index = this.players.length;		this.players.push(p);				this.SetupPlayer(index);		this.players[index].name = name;		this.players[index].colour = colour;							return index;	},		SetupPlayer: function(index) {			this.players[index].Reset();			//Ensure no collision		do{			this.players[index].RandomiseCoordinates();		}while(this.CheckCollisionWithOtherPlayersHead(index) != -1 || this.CheckCollisionWithOtherPlayersBody(index) != -1);		},		RemovePlayer: function(index) {		this.players.splice(index,1);		return this.players.length-1;	},	FindPlayerByName: function(name,exclude) {		//Loop through the players and find the index		for(var i = 0; i < this.players.length; i++) {			if(i != exclude) {				if(name.toUpperCase() == this.players[i].name.toUpperCase()) {					return i;				}			}		}				//Nothing found		return -1;	},		IsNameOK: function(name) {		//Check for any issues		if(!name.match(/[\[\]~{},"']/) && name.length > 0 && name.length <= 25){			return true;		}		else {			return false;		}	},		CheckCollisionWithOtherPlayersHead: function(index) {				//-1 = nothing, >= 0 the index				//Check to see if the index we have is colliding with other player's bodies		for(var i = 0; i < this.players.length; i++) {			if(this.players[i].alive){						//Ensure we don't check the same player				if(index != i) {									//For for head butt					if(this.players[index].body[0].x == this.players[i].body[0].x &&					   this.players[index].body[0].y == this.players[i].body[0].y) {												return i;											}									}						}					}				return -1;			},		CheckCollisionWithOtherPlayersBody: function(index) {		//Check to see if the index we have is colliding with other player's bodies		for(var i = 0; i < this.players.length; i++) {					if(this.players[i].alive) {							//Ensure we don't check the same player				if(index != i) {									//For for head butt					for(var j = 1; j < this.players[i].body.length; j++) {											if(this.players[index].body[0].x == this.players[i].body[j].x &&						   this.players[index].body[0].y == this.players[i].body[j].y) {														return i;													}										}									}						}					}				return -1;		},		RenamePlayer: function(name, newName) {			var index = this.FindPlayerByName(name, -1);		var newNameIndex = this.FindPlayerByName(newName, -1);				if(index >= 0) {			if(newNameIndex == -1) {				//Change the name and send the message to everyone				this.players[index].ChangeName(newName);				return true;			}			else{				return -2;			}		}		else{			return -1;		}		},		RecolourPlayer: function(name,colour) {				var index = this.FindPlayerByName(name, -1);				if(index >= 0) {			this.players[index].colour = colour;			this.players[index].currentColour = colour;			this.players[index].updateRequired = true;			return true;		}		else {			return false;		}			},		BanPlayer: function(i,s) {		if(!this.IsPlayerBanned(i)) {			this.banned.push({ip: i,saved: ((typeof(s) !== "undefined") ? true : false)});			this.SaveBannedPlayers();			return true;		}		else {			return false;		}	},		UnbanPlayer: function(index) {			//Remove the player and save		if(index >= 0 && index < this.banned.length) {			this.banned.splice(index,1);			this.SaveBannedPlayers();			return true;		}		else {			return false;		}		},		ClearBannedPlayers: function() {			this.banned = new Array();		this.LoadBannedPlayers();		},		GetBannedPlayer: function(filter) {			//Go through all the users and check the filter		var result = "Banned Players:\n";		result += "-------------------------------------------\n";		var include = true;				for (var i = 0; i < this.banned.length; i++) {			include = true;						//Check if we should include a person			if(typeof(filter) == "Array") {				include = false;				for(var j = 0; j < this.filter.length; j++) {					if(filter[j].toUpperCase() == this.banned[i].name.toUpperCase()) {						include = true;						break;					}				}			}			if(include) result += i + ": " + this.banned[i].ip + ", saved=" + this.banned[i].saved + "\n";		}				result += "-------------------------------------------\n";		return result;		},		LoadBannedPlayers : function() {			var data = files.ReadAll("banned.txt");				//Ensure there was data to get		if(typeof(data) !== "undefined") {			var lines = data.split("\n");			//Loop through all lines			for(var i = 0; i < lines.length; i++) {				this.banned.push({ip: lines[i].trim(),saved: true});			}		}		},		SaveBannedPlayers : function() {			files.Delete("banned.txt");				//Loop through file and write		for(var i = 0; i < this.banned.length; i++) {			if(this.banned[i].saved) files.Append("banned.txt", this.banned[i].ip);		}		},		GetPlayers: function(filter) {			var include = true;		var result = "Players:\n";		result += "---------------------------------------------\n";			for(var i = 0; i < game.players.length; i++) {			include = true;						//Check if we should include a person			if(typeof(filter) == "Array") {				include = false;				for(var j = 0; j < this.filter.length; j++) {					if(filter[j].toUpperCase() == this.banned[i].name.toUpperCase()) {						include = true;						break;					}				}			}			if(include) result += i + ": " + game.players[i].name + ", " + game.players[i].colour + ", " + game.players[i].body.length + ", " + game.players[i].kills + ", " + ((new Date() - game.players[i].time)/1000) + "\n";		}		result += "---------------------------------------------\n";		return result;		},		IsPlayerBanned: function(ip) {				//Loop through the ban list		for(var i = 0; i < this.banned.length; i++) {						if(this.banned[i].ip.toUpperCase() == ip) {				return true;			}					}				return false;			}	}//Construct this!game.LoadBannedPlayers();game.food.speed = 200;game.powerUp.speed = 2000;